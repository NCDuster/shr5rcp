[comment encoding = UTF-8 /]
[**
 * Prints a character as boardCharacterSheet.
 */]
[module boardCharacterSheet('http://urszeidler.de/shr5/1.0', 'http://urszeidler.de/shr5mngt/1.0', 'http://www.eclipse.org/emf/2002/Ecore')]
[import de::urszeidler::shr5::acceleo::common::ShadowrunTools  /]
[import de::urszeidler::shr5::acceleo::common::ShadowrunManagmentTools  /]
[import de::urszeidler::shr5::acceleo::common::ShadowrunSheetTools  /]
[import de::urszeidler::shr5::acceleo::common::ShadowrunBBSheetTools  /]
[import de::urszeidler::shr5::acceleo::common::shr5EEnumhelper  /]
[import de::urszeidler::shr5::acceleo::common::shr5ManagementEEnumhelper  /]
[import de::urszeidler::shr5::acceleo::util::shadowrunTextTools  /]


[**
 * The documentation of the template generateCharacterSheet.
 * @param anAbstaktFernKampfwaffe
 */]
[template public generateCharacterSheet(aManagedCharacter : ManagedCharacter)]
[comment @main/]
[file (aManagedCharacter.persona.name+'BB.txt', false, 'UTF-8')]
[printBoardCharacterReport(aManagedCharacter)/]
[/file]
[/template]



[**
 * Print the chracter as a BB board txt.
 * 
*/]
[template public printBoardCharacterReport(aManagedCharacter : ManagedCharacter)
{ empty :String =  '.........................' ;
  empty1 :String =  '....................' ;
}]
[printBasicCharacterData(aManagedCharacter)/]
[printPersonaBasic(aManagedCharacter,empty)/]

[printSkillGroup(aManagedCharacter.persona.fertigkeitsGruppen,empty)/]

[printActiveSkills(aManagedCharacter.persona.fertigkeiten,empty)/]

[printKnowledgeSkills(aManagedCharacter.persona.fertigkeiten,empty)/]

[if (aManagedCharacter.persona.oclIsKindOf(Zauberer))]
[let z : Zauberer = aManagedCharacter.persona.oclAsType(Zauberer)]
[printSpells(z,'',empty1)/]
[/let]
[/if]
[if (aManagedCharacter.persona.oclIsKindOf(KiAdept))]
[printKiPowers( aManagedCharacter.persona.oclAsType(KiAdept).kikraft)/]
[/if]
[if (aManagedCharacter.persona.oclIsKindOf(Technomancer))]
[printComplexForms( aManagedCharacter.persona.oclAsType(Technomancer).complexForms )/]
[/if]

[if (aManagedCharacter.persona.oclIsKindOf(KoerperPersona))]
[let kp : KoerperPersona = aManagedCharacter.persona.oclAsType(KoerperPersona)]
[printQualities(kp.eigenschaften, empty)/]
[printAugmentations(kp.koerperMods, empty)/]
[/let]
[/if]

[printGear(aManagedCharacter.inventar->asSequence(),empty)/]

[printContracts(aManagedCharacter.contracts->asSequence(),empty)/]

[printConnections(aManagedCharacter.connections,empty)/]

[printVehicles(aManagedCharacter.vehicels,empty)/]

[printAdvacements(aManagedCharacter.changes)/]

[/template]

[template public printComplexForms (pcf : OrderedSet(PersonaKomplexForm)) ? (not pcf->isEmpty()) ]
['Complex Forms'.titelText()/]
[for (it : PersonaKomplexForm | pcf)]
[it.form.name/]
[/for]
[/template]

[template public printPersonaBasic(aManagedCharacter : ManagedCharacter,empty :String)
{persona : AbstraktPersona = aManagedCharacter.persona ; }]
['Attributes'.titelText()/]
[printAttributes(persona,empty)/]
[printTextPlusSpace('Essence', empty)/] [   (persona.essenz)/100  /]
[printTextPlusSpace('Initiative', empty)/] [persona.initative/]+[persona.initativWuerfel/]d6
[if(persona.oclIsKindOf(AstraleProjektion))]
[let ap : AstraleProjektion = persona.oclAsType(AstraleProjektion)]
[printTextPlusSpace('Astral Ini', empty)/] [ap.astraleInitative/]+[ap.astraleInitativWuerfel/]d6
[/let][/if]
[if (aManagedCharacter.hasMatrixInitative())]
[printTextPlusSpace('Matrix Ini cold', empty)/] [aManagedCharacter.getMatrixInitative()/]+3d6
[printTextPlusSpace('Matrix Ini hot', empty)/] [aManagedCharacter.getMatrixInitative()/]+4d6
[/if]
[printTextPlusSpace('Condition', empty)/] [persona.oclAsType(KoerperPersona).zustandKoerperlichMax/]/[persona.oclAsType(KoerperPersona).zustandGeistigMax/]
[printTextPlusSpace('Armor', empty)/] [persona.oclAsType(KoerperPersona).panzer/]
[printTextPlusSpace('Composure', empty)/] [persona.willenskraft + persona.charisma  /]
[printTextPlusSpace('Judge Intentions', empty)/] [persona.intuition + persona.charisma  /]
[printTextPlusSpace('Memory', empty)/] [persona.willenskraft + persona.logik  /]
[printTextPlusSpace('Lifting/Carrying', empty)/] [persona.staerke  * 15 /]/[persona.staerke  * 10/]
[printTextPlusSpace('Movement', empty)/] [persona.geschicklichkeit * persona.spezies.laufen /]/[persona.geschicklichkeit * persona.spezies.rennen /]/[persona.spezies.sprinten /]

Limits
Physical [persona.oclAsType(KoerperPersona).koerperlich/] / Mental [persona.oclAsType(KoerperPersona).geistig/] / Social [persona.oclAsType(KoerperPersona).sozial/]
[/template]

[**
 * Print the qualities
*/]
[template public printAdvacements(gears : OrderedSet(Changes)) ? (not gears->isEmpty()) { empty :String = '                                             ' ;}]
['Karma'.titelText()/]
[for (ag : Changes | gears)]
[ printTextPlusSpace(ag.date.getText()+' '+  getText(ag),empty)  /] [ag.karmaCost/]
[/for]
[/template]

[**
 * Print the qualities
*/]
[template public printQualities(gears : OrderedSet(PersonaEigenschaft),empty :String) ? (not gears->isEmpty())]
['Qualities'.titelText()/]
[for (ag : PersonaEigenschaft | gears)]
[printTextPlusSpace(ag.name,empty)/][ag.karmaKosten/]
[/for]

[printTextPlusSpace('sum :', empty)/][sumQuallitiyKarma(gears)/]
[/template]

[**
 * Print the kipowers
*/]
[template public printKiPowers(gears : OrderedSet(KiKraft)) ? (not gears->isEmpty())]
['KiPowers'.titelText()/]
[for (ag : KiKraft | gears)]
[ag.name  /]
[/for]
[/template]


[**
 * Print the wares
*/]
[template public printAugmentations(gears : OrderedSet(Koerpermods),empty :String) ? (not gears->isEmpty())
]
['Augmentations'.titelText()/]
[for (ag : Koerpermods | gears)]
[printTextPlusSpace(ag.name,empty)/][ag.oclAsType(GeldWert).wert/]
[/for]

[printTextPlusSpace('sum :', empty)/][calcListenWertToString(gears->asSequence())/]
[/template]

[template public printBasicCharacterData(aManagedCharacter : ManagedCharacter)]
['Basic Data'.titelText()/]
[let persona : AbstraktPersona = aManagedCharacter.persona]
Name 		: [persona.name /]  Sex : [toLocalizedSexString(aManagedCharacter.sex, 'en')/]
Metatype 	: [persona.spezies.name/] Type : [getText(  persona.eClass())/]

[if (not (persona.beschreibung.size()=0 ) )]
[persona.beschreibung.tagText('quote')/]
[/if]
[/let]
[/template]


[**
 * print the attributes the persona, uses the localized text.
*/]
[template public printAttributes(persona : AbstraktPersona,empty :String)]
[for (ea : EAttribute | getOrderedAttibutesForPersona(persona))]
[let attributeName : String = getText(base2Calced(ea))]
[printTextPlusSpace(attributeName, empty)/] [persona.eGet(ea)/][if(not (persona.eGet(ea)=persona.eGet(base2Calced(ea))))]([persona.eGet(base2Calced(ea))/])[/if]
[/let]
[/for]
[/template]


[template public printSkillGroup(sg : OrderedSet(PersonaFertigkeitsGruppe),empty :String)]
['Skill Groups'.titelText()/]
[for (pfg : PersonaFertigkeitsGruppe | sg)]
[printTextPlusSpace(pfg.gruppe.name, empty)/] [pfg.stufe/]
[/for]
[/template]

[template public printVehicles(sg : OrderedSet(Fahrzeug),empty :String)? (not sg->isEmpty())]
['Vehicles'.titelText()/]
[for (pfg : Fahrzeug | sg)]
[printTextPlusSpace(pfg.name   ,empty)/] [pfg.wert/]
[/for]

[printTextPlusSpace('sum :', empty)/] [calcListenWertToString(sg->asSequence()) /]
[/template]


[template public printActiveSkills(sg : OrderedSet(PersonaFertigkeit),empty :String)]
['Active Skills'.titelText()/]
[for (pfg : PersonaFertigkeit | sg)]
[if (not(pfg.fertigkeit.oclIsKindOf(Wissensfertigkeit) ))]
[printTextPlusSpace(pfg.fertigkeit.name,empty)/] [pfg.stufe/]
[/if]
[/for]
[/template]

[template public printKnowledgeSkills(sg : OrderedSet(PersonaFertigkeit),empty :String)]
['Knowledge Skills'.titelText()/]
[for (pfg : PersonaFertigkeit | sg)]
[if ((pfg.fertigkeit.oclIsKindOf(Wissensfertigkeit) ))]
[printTextPlusSpace(pfg.fertigkeit.name,empty )/] [pfg.stufe/]
[/if]
[/for]
[/template]


[template public printConnections(c : OrderedSet(Connection),empty :String)? (not c->isEmpty())]
['Connections'.titelText()/]
[for (connection : Connection | c)]
[printTextPlusSpace(connection.character.persona.name,empty)/]  [connection.influence/]/[connection.loyality/]
[/for]
[/template]

[template public printSpells(z : Zauberer,loc : String,empty :String) ? (not z.zauber->isEmpty())]
['Spells'.titelText()/]
[for (pz : PersonaZauber | z.zauber)]
[printTextPlusSpace(pz.formel.name, empty)/]
[/for]
[/template]

[template public printGear(gears : Sequence(AbstraktGegenstand), empty :String)? (not gears->isEmpty())]
['Gear'.titelText()/]
[for (ag : AbstraktGegenstand | gears)]
[printTextPlusSpace(ag.name,empty)/][ag.wert/]
[/for]

[printTextPlusSpace('sum :', empty)/] [calcListenWertToString(gears) /]
[/template]

[template public printContracts(gears : Sequence(Vertrag),empty :String)? (not gears->isEmpty())]
['Contracts'.titelText()/]
[for (ag : Vertrag | gears)]
[printTextPlusSpace(ag.name,empty)/] [ag.wert/]
[/for]

[printTextPlusSpace('sum :', empty)/] [calcListenWertToString(gears) /]
[/template]

