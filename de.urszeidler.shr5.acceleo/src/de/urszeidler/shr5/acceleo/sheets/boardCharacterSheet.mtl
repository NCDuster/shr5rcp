[comment encoding = UTF-8 /]
[**
 * Prints a character as boardCharacterSheet.
 */]
[module boardCharacterSheet('http://urszeidler.de/shr5/1.0', 'http://urszeidler.de/shr5mngt/1.0', 'http://www.eclipse.org/emf/2002/Ecore')]
[import de::urszeidler::shr5::acceleo::common::ShadowrunTools  /]
[import de::urszeidler::shr5::acceleo::common::ShadowrunManagmentTools  /]
[import de::urszeidler::shr5::acceleo::common::ShadowrunSheetTools  /]
[import de::urszeidler::shr5::acceleo::common::shr5EEnumhelper  /]
[import de::urszeidler::shr5::acceleo::common::shr5ManagementEEnumhelper  /]


[**
 * The documentation of the template generateCharacterSheet.
 * @param anAbstaktFernKampfwaffe
 */]
[template public generateCharacterSheet(aManagedCharacter : ManagedCharacter)]
[comment @main/]
[file (aManagedCharacter.persona.name+'.txt', false, 'UTF-8')]
[printBoardCharacterReport(aManagedCharacter)/]
[/file]
[/template]

[**
 * Print the chracter as a board txt.
*/]
[template public printBoardCharacterReport(aManagedCharacter : ManagedCharacter)]
[printBasicCharacterData(aManagedCharacter)/]
[printPersonaBasic(aManagedCharacter.persona)/]

[if (aManagedCharacter.persona.oclIsKindOf(Zauberer))]
[let z : Zauberer = aManagedCharacter.persona.oclAsType(Zauberer)]
[printSpells(z,'en')/]
[/let]
[/if]
[if (aManagedCharacter.persona.oclIsKindOf(KiAdept))]
[printKiPowers( aManagedCharacter.persona.oclAsType(KiAdept).kikraft)/]
[/if]

[printSkillGroup(aManagedCharacter.persona.fertigkeitsGruppen)/]

[printActiveSkills(aManagedCharacter.persona.fertigkeiten)/]

[printKnowledgeSkills(aManagedCharacter.persona.fertigkeiten)/]

[if (aManagedCharacter.persona.oclIsKindOf(KoerperPersona))]
[let kp : KoerperPersona = aManagedCharacter.persona.oclAsType(KoerperPersona)]
[printQualities(kp.eigenschaften)/]
[printAugmentations(kp.koerperMods)/]
[/let]
[/if]

[printGear(aManagedCharacter.inventar->asSequence())/]

[printContracts(aManagedCharacter.contracts->asSequence())/]

[printConnections(aManagedCharacter.connections)/]

[printVehicles(aManagedCharacter.vehicels)/]

[printAdvacements(aManagedCharacter.changes)/]

[/template]

[template public printPersonaBasic(persona : AbstraktPersona){ emtpty :String = '                    ' ;}]
['['/]b[']'/]Attributes:[ '[' /]/b[']'/]
[printAttributes(persona)/]
[printTextPlusSpace('Essence', emtpty)/] [   (persona.essenz)/100  /]
[printTextPlusSpace('Initiative', emtpty)/] [persona.initative/]+[persona.initativWuerfel/]d6
[printTextPlusSpace('Condition', emtpty)/] [persona.oclAsType(KoerperPersona).zustandKoerperlichMax/]/[persona.oclAsType(KoerperPersona).zustandGeistigMax/]
[printTextPlusSpace('Armor', emtpty)/] [persona.oclAsType(KoerperPersona).panzer/]
[printTextPlusSpace('Composure', emtpty)/] [persona.willenskraft + persona.charisma  /]
[printTextPlusSpace('Judge Intentions', emtpty)/] [persona.intuition + persona.charisma  /]
[printTextPlusSpace('Memory', emtpty)/] [persona.willenskraft + persona.logik  /]
[printTextPlusSpace('Lifting/Carrying', emtpty)/] [persona.staerke  * 15 /]/[persona.staerke  * 10/]
[printTextPlusSpace('Movement', emtpty)/] [persona.geschicklichkeit * persona.spezies.laufen /]/[persona.geschicklichkeit * persona.spezies.rennen /]/[persona.spezies.sprinten /]

Limits
Physical [persona.oclAsType(KoerperPersona).koerperlich/] / Mental [persona.oclAsType(KoerperPersona).geistig/] / Social [persona.oclAsType(KoerperPersona).sozial/]
[/template]

[**
 * Print the qualities
*/]
[template public printAdvacements(gears : OrderedSet(Changes)) ? (not gears->isEmpty()) { emtpty :String = '                                             ' ;}]
[ '[' /]b[']'/]Karma:[ '[' /]/b[']'/]
[for (ag : Changes | gears)]
[ printTextPlusSpace(getText(ag),emtpty)  /] [ag.karmaCost/]
[/for]
[/template]

[**
 * Print the qualities
*/]
[template public printQualities(gears : OrderedSet(PersonaEigenschaft)) ? (not gears->isEmpty())]
[ '[' /]b[']'/]Qualities:[ '[' /]/b[']'/]
[for (ag : PersonaEigenschaft | gears)]
[ag.name  /]
[/for]
[/template]

[**
 * Print the qualities
*/]
[template public printKiPowers(gears : OrderedSet(KiKraft)) ? (not gears->isEmpty())]
[ '[' /]b[']'/]KiPowers :[ '[' /]/b[']'/]
[for (ag : KiKraft | gears)]
[ag.name  /]
[/for]
[/template]


[**
 * Print the wares
*/]
[template public printAugmentations(gears : OrderedSet(Koerpermods)) ? (not gears->isEmpty()){ emtpty :String = '                    ' ;}]
[ '[' /]b[']'/]Augmentations:[ '[' /]/b[']'/]
[for (ag : Koerpermods | gears)]
[printTextPlusSpace(ag.name,emtpty)  /] [ag.oclAsType(GeldWert).wert/]
[/for]
----
[printTextPlusSpace('sum :', emtpty)/] [calcListenWertToString(gears->asSequence()) /]
[/template]

[template public printBasicCharacterData(aManagedCharacter : ManagedCharacter)]
[let persona : AbstraktPersona = aManagedCharacter.persona]
Name 		: [persona.name /]  Sex : [toLocalizedSexString(aManagedCharacter.sex, 'en')    /]
Metatype 	: [persona.spezies.name/] Type : [getText(  persona.eClass()) /]
[/let]
[/template]


[**
 * print the attributes the persona, uses the localized text.
*/]
[template public printAttributes(persona : AbstraktPersona){ emtpty :String = '                    ' ;}]
[for (ea : EAttribute | getOrderedAttibutesForPersona(persona))]
[let attributeName : String = getText(base2Calced(ea))]
[printTextPlusSpace(attributeName, emtpty)/] [persona.eGet(ea)/][if(not (persona.eGet(ea)=persona.eGet(base2Calced(ea))))]([persona.eGet(base2Calced(ea))/])[/if]
[/let]
[/for]
[/template]


[template public printSkillGroup(sg : OrderedSet(PersonaFertigkeitsGruppe)){ emtpty :String = '               ' ;}]
[ '[' /]b[']'/]Skill Groups:[ '[' /]/b[']'/]
[for (pfg : PersonaFertigkeitsGruppe | sg)]
[printTextPlusSpace(pfg.gruppe.name, emtpty)/] [pfg.stufe/]
[/for]
[/template]

[template public printVehicles(sg : OrderedSet(Fahrzeug))? (not sg->isEmpty()) { emtpty :String = '               ' ;}]
[ '[' /]b[']'/]Vehicles[ '[' /]/b[']'/]
[for (pfg : Fahrzeug | sg)]
[printTextPlusSpace(pfg.name   ,emtpty)/] [pfg.wert/]
[/for]
----
[printTextPlusSpace('sum :', emtpty)/] [calcListenWertToString(sg->asSequence()) /]
[/template]


[template public printActiveSkills(sg : OrderedSet(PersonaFertigkeit)) { emtpty :String = '               ' ;}]
[ '[' /]b[']'/]Active Skills:[ '[' /]/b[']'/]
[for (pfg : PersonaFertigkeit | sg)]
[if (not(pfg.fertigkeit.oclIsKindOf(Wissensfertigkeit) ))]
[printTextPlusSpace(pfg.fertigkeit.name,emtpty)/] 	[pfg.stufe/]
[/if]
[/for]
[/template]

[template public printKnowledgeSkills(sg : OrderedSet(PersonaFertigkeit)){ emtpty :String = '               ' ;}]
[ '[' /]b[']'/]Knowledge Skills:[ '[' /]/b[']'/]
[for (pfg : PersonaFertigkeit | sg)]
[if ((pfg.fertigkeit.oclIsKindOf(Wissensfertigkeit) ))]
[printTextPlusSpace(pfg.fertigkeit.name,emtpty )/] [pfg.stufe/]
[/if]
[/for]
[/template]


[template public printConnections(c : OrderedSet(Connection))? (not c->isEmpty()){ emtpty :String = '               ' ;}]
[ '[' /]b[']'/]Contacts:[ '[' /]/b[']'/]
[for (connection : Connection | c)]
[printTextPlusSpace(connection.character.persona.name,emtpty) /]  [connection.influence/]/[connection.loyality/]
[/for]
[/template]

[template public printSpells(z : Zauberer,loc : String) ? (not z.zauber->isEmpty())]
[ '[' /]b[']'/]Spells:[ '[' /]/b[']'/]
[for (pz : PersonaZauber | z.zauber)]
[pz.formel.name/] | [toLocalizedZauberArtString(pz.formel.art, loc) /] | [toLocalizedZauberDauerString(pz.formel.dauer, loc) /]| [toLocalizedZauberReichweiteString(pz.formel.reichweite, loc) /]
[/for]
[/template]

[template public printGear(gears : Sequence(AbstraktGegenstand))? (not gears->isEmpty()) { emtpty :String = '               ' ;}]
[ '[' /]b[']'/]Gear:[ '[' /]/b[']'/]
[for (ag : AbstraktGegenstand | gears)]
[printTextPlusSpace(ag.name,emtpty)  /]	[ag.wert/]
[/for]
----
[printTextPlusSpace('sum :', emtpty)/] [calcListenWertToString(gears) /]
[/template]

[template public printContracts(gears : Sequence(Vertrag))? (not gears->isEmpty()){ emtpty :String = '               ' ;}]
[ '[' /]b[']'/]Contracts:[ '[' /]/b[']'/]
[for (ag : Vertrag | gears)]
[printTextPlusSpace(ag.name,emtpty)  /]	[ag.wert/]
[/for]
----
[printTextPlusSpace('sum :', emtpty)/] [calcListenWertToString(gears) /]
[/template]

